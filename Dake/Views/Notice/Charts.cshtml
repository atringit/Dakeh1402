
@model List<Dake.Models.VisitNotice>
@{
    var visitNoticeCount = "";
    @foreach (var item in Model)
    {
        visitNoticeCount += item.countView + ",";
    }
        if (visitNoticeCount != "")
        {
            visitNoticeCount = visitNoticeCount.Remove(visitNoticeCount.Length - 1);
        }
    }

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <!-- Main content -->
    <section class="content">
        <div class="row">

            <!-- /.col (LEFT) -->
            <div class="col-md-12">
                <!-- LINE CHART -->
                <!-- /.box -->
                <!-- BAR CHART -->
                <div class="box box-success">
                    <div class="box-header with-border">
                        <h3 class="box-title">تعداد بازید در هفت روز آخر</h3>

                    </div>
                    <div class="box-body">
                        <div class="chart">
                            <canvas id="barChart" style="height:400px"></canvas>
                        </div>
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /.box -->
            </div>
            <!-- /.col (RIGHT) -->
        </div>
        <!-- /.row -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->




@section scripts
    {
    <script src="/AdminContent/bower_components/Chart.js/Chart.js"></script>

    <script>
        $(function () {
             
            
                var areaChartData = {
                
                labels: ['@Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Take(1)?.FirstOrDefault()?.date)','@Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(1)?.Take(1)?.FirstOrDefault()?.date)','@Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(2)?.Take(1)?.FirstOrDefault()?.date)','@Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(3)?.Take(1)?.FirstOrDefault()?.date)','@Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(4)?.Take(1)?.FirstOrDefault()?.date)','@Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(5)?.Take(1)?.FirstOrDefault()?.date)','@Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(6)?.Take(1)?.FirstOrDefault()?.date)'],
                datasets: [
                    {
                            label: 'Electronics',
                        fillColor: 'rgba(210, 214, 222, 1)',
                        strokeColor: 'rgba(210, 214, 222, 1)',
                        pointColor: 'rgba(210, 214, 222, 1)',
                        pointStrokeColor: '#c1c7d1',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(220,220,220,1)',
                        data: [0, 0, 0, 0, 0, 0, 0]
                    },
                    {
                            label: 'Digital Goods',
                        fillColor: 'rgba(60,141,188,0.9)',
                        strokeColor: 'rgba(60,141,188,0.8)',
                        pointColor: '#3b8bba',
                        pointStrokeColor: 'rgba(60,141,188,1)',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(60,141,188,1)',
                        data: [@visitNoticeCount]
                        

                    }
                ]
            }
                    var barChartCanvas = $('#barChart').get(0).getContext('2d')
            var barChart = new Chart(barChartCanvas)
            var barChartData = areaChartData
            barChartData.datasets[1].fillColor = '#00a65a'
            barChartData.datasets[1].strokeColor = '#00a65a'
            barChartData.datasets[1].pointColor = '#00a65a'
            var barChartOptions = {
                //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                scaleBeginAtZero: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: 'rgba(0,0,0,.05)',
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - If there is a stroke on each bar
                barShowStroke: true,
                //Number - Pixel width of the bar stroke
                barStrokeWidth: 2,
                //Number - Spacing between each of the X value sets
                barValueSpacing: 5,
                //Number - Spacing between data sets within X values
                barDatasetSpacing: 1,
                //String - A legend template
                legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
                //Boolean - whether to make the chart responsive
                responsive: true,
                maintainAspectRatio: true
            }

            barChartOptions.datasetFill = false
            barChart.Bar(barChartData, barChartOptions)
                })
    </script>
}
