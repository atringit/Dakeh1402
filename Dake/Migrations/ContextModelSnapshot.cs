// <auto-generated />
using System;
using Dake.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dake.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dake.Models.AboutUs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.HasKey("id");

                    b.ToTable("AboutUss");
                });

            modelBuilder.Entity("Dake.Models.AdminActivity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("activityType");

                    b.Property<DateTime>("date");

                    b.Property<long?>("noticeId");

                    b.Property<int?>("userId");

                    b.HasKey("id");

                    b.HasIndex("noticeId");

                    b.HasIndex("userId");

                    b.ToTable("AdminActivities");
                });

            modelBuilder.Entity("Dake.Models.AdminsInCity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cityId");

                    b.Property<int>("userid");

                    b.HasKey("id");

                    b.HasIndex("cityId");

                    b.HasIndex("userid");

                    b.ToTable("AdminsInCities");
                });

            modelBuilder.Entity("Dake.Models.AdminsInProvice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("adminsInCityId");

                    b.Property<int?>("provinceId");

                    b.Property<int?>("userId");

                    b.HasKey("id");

                    b.HasIndex("adminsInCityId");

                    b.HasIndex("provinceId");

                    b.HasIndex("userId");

                    b.ToTable("AdminsInProvices");
                });

            modelBuilder.Entity("Dake.Models.Area", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasMaxLength(50);

                    b.Property<int>("provinceId");

                    b.HasKey("id");

                    b.HasIndex("provinceId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Dake.Models.Banner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcceptedDate");

                    b.Property<string>("AdminUserAccepted");

                    b.Property<DateTime?>("ExpireDateEmergency");

                    b.Property<string>("Link")
                        .HasMaxLength(1000);

                    b.Property<int>("adminConfirmStatus");

                    b.Property<string>("code");

                    b.Property<int>("countView");

                    b.Property<DateTime>("createDate");

                    b.Property<DateTime>("expireDate");

                    b.Property<DateTime?>("expireDateIsespacial");

                    b.Property<bool>("isEmergency");

                    b.Property<bool>("isPaid");

                    b.Property<bool>("isSpecial");

                    b.Property<string>("notConfirmDescription")
                        .HasMaxLength(1000);

                    b.Property<string>("title");

                    b.Property<int>("userId");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("Dake.Models.BannerImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BannerId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("FileLocation");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.ToTable("BannerImage");
                });

            modelBuilder.Entity("Dake.Models.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("emergencyPrice");

                    b.Property<long>("espacialPrice");

                    b.Property<long>("expirePrice");

                    b.Property<string>("image")
                        .HasMaxLength(500);

                    b.Property<long>("laderPrice");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("parentCategoryId");

                    b.Property<long>("registerPrice");

                    b.Property<string>("staticemergencyPriceId");

                    b.Property<string>("staticespacialPriceId");

                    b.Property<string>("staticexpirePriceId");

                    b.Property<string>("staticladerPriceId");

                    b.Property<string>("staticregisterPriceId");

                    b.HasKey("id");

                    b.HasIndex("parentCategoryId");

                    b.ToTable("Categorys");
                });

            modelBuilder.Entity("Dake.Models.City", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Dake.Models.ContactUs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PageEitta")
                        .HasMaxLength(200);

                    b.Property<string>("androidVersion")
                        .HasMaxLength(20);

                    b.Property<string>("email")
                        .HasMaxLength(200);

                    b.Property<string>("pageInstagramUrl")
                        .HasMaxLength(200);

                    b.Property<string>("pageTelegramUrl")
                        .HasMaxLength(200);

                    b.Property<string>("pageTwitterUrl")
                        .HasMaxLength(200);

                    b.Property<string>("phone")
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.ToTable("ContactUss");
                });

            modelBuilder.Entity("Dake.Models.DiscountCode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("code");

                    b.Property<int>("count");

                    b.Property<long>("price");

                    b.Property<int>("remain");

                    b.HasKey("id");

                    b.ToTable("DiscountCodes");
                });

            modelBuilder.Entity("Dake.Models.Factor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("bannerId");

                    b.Property<string>("createDatePersian")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("factorKind");

                    b.Property<long?>("noticeId");

                    b.Property<int>("state");

                    b.Property<long>("totalPrice");

                    b.Property<int>("userId");

                    b.HasKey("id");

                    b.HasIndex("bannerId");

                    b.HasIndex("noticeId");

                    b.HasIndex("userId");

                    b.ToTable("Factors");
                });

            modelBuilder.Entity("Dake.Models.FactorItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FactorId");

                    b.Property<long>("ProductId");

                    b.Property<long>("price");

                    b.HasKey("id");

                    b.HasIndex("FactorId");

                    b.HasIndex("ProductId");

                    b.ToTable("FactorItems");
                });

            modelBuilder.Entity("Dake.Models.Information", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Link");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("id");

                    b.ToTable("Informations");
                });

            modelBuilder.Entity("Dake.Models.InformationMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<int>("InformationId");

                    b.HasKey("Id");

                    b.HasIndex("InformationId");

                    b.ToTable("InformationMedias");
                });

            modelBuilder.Entity("Dake.Models.Message", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<int>("MessageType");

                    b.Property<long?>("Noticeid");

                    b.Property<DateTime>("date");

                    b.Property<bool>("isrep");

                    b.Property<int?>("receiverid");

                    b.Property<int>("rreceiverId");

                    b.Property<int?>("senderid");

                    b.Property<int>("ssenderId");

                    b.Property<string>("text");

                    b.HasKey("id");

                    b.HasIndex("Noticeid");

                    b.HasIndex("receiverid");

                    b.HasIndex("senderid");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Dake.Models.Notice", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcceptedDate");

                    b.Property<string>("AdminUserAccepted");

                    b.Property<DateTime?>("ExpireDateEmergency");

                    b.Property<int>("adminConfirmStatus");

                    b.Property<int>("areaId");

                    b.Property<int>("categoryId");

                    b.Property<int>("cityId");

                    b.Property<string>("code");

                    b.Property<int>("countView");

                    b.Property<DateTime>("createDate")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("deletedAt");

                    b.Property<string>("description")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("expireDate")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("expireDateIsespacial")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("image")
                        .HasMaxLength(500);

                    b.Property<bool>("isEmergency");

                    b.Property<bool>("isPaid");

                    b.Property<bool>("isSpecial");

                    b.Property<long>("lastPrice");

                    b.Property<string>("link")
                        .HasMaxLength(1000);

                    b.Property<string>("movie")
                        .HasMaxLength(500);

                    b.Property<string>("notConfirmDescription")
                        .HasMaxLength(1000);

                    b.Property<long>("price");

                    b.Property<int>("provinceId");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("userId");

                    b.HasKey("id");

                    b.HasIndex("areaId");

                    b.HasIndex("categoryId");

                    b.HasIndex("cityId");

                    b.HasIndex("provinceId");

                    b.HasIndex("userId");

                    b.ToTable("Notices");
                });

            modelBuilder.Entity("Dake.Models.NoticeImage", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("image")
                        .HasMaxLength(500);

                    b.Property<long>("noticeId");

                    b.HasKey("id");

                    b.HasIndex("noticeId");

                    b.ToTable("NoticeImages");
                });

            modelBuilder.Entity("Dake.Models.PaymentRequestAttemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FactorId");

                    b.Property<long>("NoticeId");

                    b.Property<int>("UserId");

                    b.Property<int>("pursheType");

                    b.HasKey("Id");

                    b.ToTable("PaymentRequestAttemps");
                });

            modelBuilder.Entity("Dake.Models.Province", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cityId");

                    b.Property<string>("name")
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("cityId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Dake.Models.ReportNotice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<long>("noticeId");

                    b.Property<int>("userId");

                    b.HasKey("id");

                    b.HasIndex("noticeId");

                    b.HasIndex("userId");

                    b.ToTable("ReportNotices");
                });

            modelBuilder.Entity("Dake.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleNameEn")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("RoleNameFa")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Dake.Models.Rule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.HasKey("id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("Dake.Models.Setting", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoAccept");

                    b.Property<int?>("countExpireDate");

                    b.Property<int?>("countExpireDateEmergency");

                    b.Property<int?>("countExpireDateIsespacial");

                    b.Property<bool>("showPriceForCars");

                    b.Property<string>("wrongWord")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Dake.Models.Slider", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("image")
                        .HasMaxLength(500);

                    b.Property<string>("link")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("Dake.Models.StaticPrice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("code");

                    b.Property<long>("price");

                    b.HasKey("id");

                    b.ToTable("StaticPrices");
                });

            modelBuilder.Entity("Dake.Models.Stir", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.HasKey("id");

                    b.ToTable("Stirs");
                });

            modelBuilder.Entity("Dake.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Invite_Link")
                        .HasMaxLength(100);

                    b.Property<int>("Invite_Price");

                    b.Property<bool>("IsBlocked");

                    b.Property<string>("PushNotifToken");

                    b.Property<string>("adminRole")
                        .HasMaxLength(50);

                    b.Property<string>("cellphone")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("code")
                        .HasMaxLength(6);

                    b.Property<string>("deleted");

                    b.Property<bool>("isCodeConfirmed");

                    b.Property<DateTime>("oTPDate")
                        .HasMaxLength(50);

                    b.Property<string>("password")
                        .HasMaxLength(200);

                    b.Property<string>("passwordShow")
                        .HasMaxLength(20);

                    b.Property<int?>("provinceId");

                    b.Property<int>("roleId");

                    b.Property<string>("token")
                        .HasMaxLength(100);

                    b.HasKey("id");

                    b.HasIndex("provinceId");

                    b.HasIndex("roleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dake.Models.UserFavorite", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("noticeId");

                    b.Property<int>("userId");

                    b.HasKey("id");

                    b.HasIndex("noticeId");

                    b.HasIndex("userId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("Dake.Models.UsersToDiscountCode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscountCodeId");

                    b.Property<int>("UserId");

                    b.HasKey("id");

                    b.HasIndex("DiscountCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToDiscountCodes");
                });

            modelBuilder.Entity("Dake.Models.VisitNotice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("countView");

                    b.Property<DateTime>("date")
                        .HasMaxLength(50);

                    b.Property<long>("noticeId");

                    b.HasKey("id");

                    b.HasIndex("noticeId");

                    b.ToTable("VisitNotices");
                });

            modelBuilder.Entity("Dake.Models.VisitNoticeUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("noticeId");

                    b.Property<int>("userId");

                    b.HasKey("id");

                    b.HasIndex("noticeId");

                    b.HasIndex("userId");

                    b.ToTable("VisitNoticeUsers");
                });

            modelBuilder.Entity("Dake.Models.AdminActivity", b =>
                {
                    b.HasOne("Dake.Models.Notice", "notice")
                        .WithMany()
                        .HasForeignKey("noticeId");

                    b.HasOne("Dake.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("Dake.Models.AdminsInCity", b =>
                {
                    b.HasOne("Dake.Models.City", "city")
                        .WithMany()
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dake.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.AdminsInProvice", b =>
                {
                    b.HasOne("Dake.Models.AdminsInCity", "adminsInCity")
                        .WithMany()
                        .HasForeignKey("adminsInCityId");

                    b.HasOne("Dake.Models.Province", "province")
                        .WithMany()
                        .HasForeignKey("provinceId");

                    b.HasOne("Dake.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("Dake.Models.Area", b =>
                {
                    b.HasOne("Dake.Models.Province", "province")
                        .WithMany()
                        .HasForeignKey("provinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.Banner", b =>
                {
                    b.HasOne("Dake.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.BannerImage", b =>
                {
                    b.HasOne("Dake.Models.Banner", "Banner")
                        .WithMany("BannerImage")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.Category", b =>
                {
                    b.HasOne("Dake.Models.Category", "parentCategory")
                        .WithMany()
                        .HasForeignKey("parentCategoryId");
                });

            modelBuilder.Entity("Dake.Models.Factor", b =>
                {
                    b.HasOne("Dake.Models.Banner", "banner")
                        .WithMany()
                        .HasForeignKey("bannerId");

                    b.HasOne("Dake.Models.Notice", "notice")
                        .WithMany()
                        .HasForeignKey("noticeId");

                    b.HasOne("Dake.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.FactorItem", b =>
                {
                    b.HasOne("Dake.Models.Factor", "Factor")
                        .WithMany()
                        .HasForeignKey("FactorId");

                    b.HasOne("Dake.Models.Notice", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.InformationMedia", b =>
                {
                    b.HasOne("Dake.Models.Information", "Information")
                        .WithMany("InformationMedias")
                        .HasForeignKey("InformationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.Message", b =>
                {
                    b.HasOne("Dake.Models.Notice", "Notice")
                        .WithMany()
                        .HasForeignKey("Noticeid");

                    b.HasOne("Dake.Models.User", "receiver")
                        .WithMany()
                        .HasForeignKey("receiverid");

                    b.HasOne("Dake.Models.User", "sender")
                        .WithMany()
                        .HasForeignKey("senderid");
                });

            modelBuilder.Entity("Dake.Models.Notice", b =>
                {
                    b.HasOne("Dake.Models.Area", "area")
                        .WithMany()
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dake.Models.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dake.Models.City", "city")
                        .WithMany()
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dake.Models.Province", "province")
                        .WithMany()
                        .HasForeignKey("provinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dake.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.NoticeImage", b =>
                {
                    b.HasOne("Dake.Models.Notice", "notice")
                        .WithMany()
                        .HasForeignKey("noticeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.Province", b =>
                {
                    b.HasOne("Dake.Models.City", "city")
                        .WithMany()
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.ReportNotice", b =>
                {
                    b.HasOne("Dake.Models.Notice", "notice")
                        .WithMany()
                        .HasForeignKey("noticeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dake.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Dake.Models.User", b =>
                {
                    b.HasOne("Dake.Models.Province", "province")
                        .WithMany()
                        .HasForeignKey("provinceId");

                    b.HasOne("Dake.Models.Role", "role")
                        .WithMany("Users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.UserFavorite", b =>
                {
                    b.HasOne("Dake.Models.Notice", "notice")
                        .WithMany()
                        .HasForeignKey("noticeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dake.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Dake.Models.UsersToDiscountCode", b =>
                {
                    b.HasOne("Dake.Models.DiscountCode", "DiscountCode")
                        .WithMany()
                        .HasForeignKey("DiscountCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dake.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.VisitNotice", b =>
                {
                    b.HasOne("Dake.Models.Notice", "notice")
                        .WithMany()
                        .HasForeignKey("noticeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dake.Models.VisitNoticeUser", b =>
                {
                    b.HasOne("Dake.Models.Notice", "notice")
                        .WithMany()
                        .HasForeignKey("noticeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dake.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
