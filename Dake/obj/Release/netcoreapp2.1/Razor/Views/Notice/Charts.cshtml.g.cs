#pragma checksum "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "722272361d5c63a0259b680e45bc42e0bb516827883ee7356e7995e81a23bc40"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Notice_Charts), @"mvc.1.0.view", @"/Views/Notice/Charts.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Notice/Charts.cshtml", typeof(AspNetCore.Views_Notice_Charts))]
namespace AspNetCore
{
    #line default
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/_ViewImports.cshtml"
using Dake

    ;
#line 2 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/_ViewImports.cshtml"
using Dake.Models

#line default
#line hidden
    ;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"722272361d5c63a0259b680e45bc42e0bb516827883ee7356e7995e81a23bc40", @"/Views/Notice/Charts.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"07264e751121dec0f3221286ff74e14010db635f37bfdd86b93127a9318bf7b0", @"/Views/_ViewImports.cshtml")]
    public class Views_Notice_Charts : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<Dake.Models.VisitNotice>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 1, true);
            WriteLiteral("\n");
            EndContext();
#line 3 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml"
  
    var visitNoticeCount = "";
    

#line default
#line hidden

#line 5 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml"
     foreach (var item in Model)
    {
        visitNoticeCount += item.countView + ",";
    }

#line default
#line hidden

#line 8 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml"
     
        if (visitNoticeCount != "")
        {
            visitNoticeCount = visitNoticeCount.Remove(visitNoticeCount.Length - 1);
        }
    

#line default
#line hidden

            BeginContext(314, 1073, true);
            WriteLiteral(@"
<!-- Content Wrapper. Contains page content -->
<div class=""content-wrapper"">
    <!-- Content Header (Page header) -->
    <!-- Main content -->
    <section class=""content"">
        <div class=""row"">

            <!-- /.col (LEFT) -->
            <div class=""col-md-12"">
                <!-- LINE CHART -->
                <!-- /.box -->
                <!-- BAR CHART -->
                <div class=""box box-success"">
                    <div class=""box-header with-border"">
                        <h3 class=""box-title"">تعداد بازید در هفت روز آخر</h3>

                    </div>
                    <div class=""box-body"">
                        <div class=""chart"">
                            <canvas id=""barChart"" style=""height:400px""></canvas>
                        </div>
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /.box -->
            </div>
            <!-- /.col (RIGHT) -->
        </div>
        <!-- /.row -->
    </section>
    <!-- /.c");
            WriteLiteral("ontent -->\n</div>\n<!-- /.content-wrapper -->\n\n\n\n\n");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(1409, 224, true);
                WriteLiteral("\n    <script src=\"/AdminContent/bower_components/Chart.js/Chart.js\"></script>\n\n    <script>\n        $(function () {\n             \n            \n                var areaChartData = {\n                \n                labels: [\'");
                EndContext();
                BeginContext(1634, 93, false);
                Write(
#line 62 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml"
                           Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Take(1)?.FirstOrDefault()?.date)

#line default
#line hidden
                );
                EndContext();
                BeginContext(1727, 3, true);
                WriteLiteral("\',\'");
                EndContext();
                BeginContext(1731, 102, false);
                Write(
#line 62 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml"
                                                                                                                            Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(1)?.Take(1)?.FirstOrDefault()?.date)

#line default
#line hidden
                );
                EndContext();
                BeginContext(1833, 3, true);
                WriteLiteral("\',\'");
                EndContext();
                BeginContext(1837, 102, false);
                Write(
#line 62 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml"
                                                                                                                                                                                                                                      Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(2)?.Take(1)?.FirstOrDefault()?.date)

#line default
#line hidden
                );
                EndContext();
                BeginContext(1939, 3, true);
                WriteLiteral("\',\'");
                EndContext();
                BeginContext(1943, 102, false);
                Write(
#line 62 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml"
                                                                                                                                                                                                                                                                                                                                                Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(3)?.Take(1)?.FirstOrDefault()?.date)

#line default
#line hidden
                );
                EndContext();
                BeginContext(2045, 3, true);
                WriteLiteral("\',\'");
                EndContext();
                BeginContext(2049, 102, false);
                Write(
#line 62 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml"
                                                                                                                                                                                                                                                                                                                                                                                                                                                          Dake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(4)?.Take(1)?.FirstOrDefault()?.date)

#line default
#line hidden
                );
                EndContext();
                BeginContext(2151, 3, true);
                WriteLiteral("\',\'");
                EndContext();
                BeginContext(2155, 102, false);
                Write(
#line 62 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml"
ake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(5)?.Take(1)?.FirstOrDefault()?.date)

#line default
#line hidden
                );
                EndContext();
                BeginContext(2257, 3, true);
                WriteLiteral("\',\'");
                EndContext();
                BeginContext(2261, 102, false);
                Write(
#line 62 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml"
ake.Utility.PersianCalendarDate.PersianCalendarResult(Model.Skip(6)?.Take(1)?.FirstOrDefault()?.date)

#line default
#line hidden
                );
                EndContext();
                BeginContext(2363, 995, true);
                WriteLiteral(@"'],
                datasets: [
                    {
                            label: 'Electronics',
                        fillColor: 'rgba(210, 214, 222, 1)',
                        strokeColor: 'rgba(210, 214, 222, 1)',
                        pointColor: 'rgba(210, 214, 222, 1)',
                        pointStrokeColor: '#c1c7d1',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(220,220,220,1)',
                        data: [0, 0, 0, 0, 0, 0, 0]
                    },
                    {
                            label: 'Digital Goods',
                        fillColor: 'rgba(60,141,188,0.9)',
                        strokeColor: 'rgba(60,141,188,0.8)',
                        pointColor: '#3b8bba',
                        pointStrokeColor: 'rgba(60,141,188,1)',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(60,141,188,1)',
                        data: [");
                EndContext();
                BeginContext(3359, 16, false);
                Write(
#line 82 "/home/runner/work/Dakeh1402/Dakeh1402/Dake/Views/Notice/Charts.cshtml"
                                visitNoticeCount

#line default
#line hidden
                );
                EndContext();
                BeginContext(3375, 2193, true);
                WriteLiteral(@"]
                        

                    }
                ]
            }
                    var barChartCanvas = $('#barChart').get(0).getContext('2d')
            var barChart = new Chart(barChartCanvas)
            var barChartData = areaChartData
            barChartData.datasets[1].fillColor = '#00a65a'
            barChartData.datasets[1].strokeColor = '#00a65a'
            barChartData.datasets[1].pointColor = '#00a65a'
            var barChartOptions = {
                //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                scaleBeginAtZero: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: 'rgba(0,0,0,.05)',
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis");
                WriteLiteral(@")
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - If there is a stroke on each bar
                barShowStroke: true,
                //Number - Pixel width of the bar stroke
                barStrokeWidth: 2,
                //Number - Spacing between each of the X value sets
                barValueSpacing: 5,
                //Number - Spacing between data sets within X values
                barDatasetSpacing: 1,
                //String - A legend template
                legendTemplate: '<ul class=""<%=name.toLowerCase()%>-legend""><% for (var i=0; i<datasets.length; i++){%><li><span style=""background-color:<%=datasets[i].fillColor%>""></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
                //Boolean - whether to make the chart responsive
                responsive: true,
                maintainAspectRatio: true
       ");
                WriteLiteral("     }\n\n            barChartOptions.datasetFill = false\n            barChart.Bar(barChartData, barChartOptions)\n                })\n    </script>\n");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<Dake.Models.VisitNotice>> Html { get; private set; }
    }
}
#pragma warning restore 1591
